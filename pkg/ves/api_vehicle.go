/*
Vehicle Enquiry API

Interface specification for the DVLA Vehicle Enquiry API

API version: 1.2.0
Contact: DvlaAPIAccess@dvla.gov.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ves

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// VehicleApiService VehicleApi service
type VehicleApiService service

type ApiGetVehicleDetailsByRegistrationNumberRequest struct {
	ctx context.Context
	ApiService *VehicleApiService
	xApiKey *string
	vehicleRequest *VehicleRequest
	xCorrelationId *string
}

// Client Specific API Key
func (r ApiGetVehicleDetailsByRegistrationNumberRequest) XApiKey(xApiKey string) ApiGetVehicleDetailsByRegistrationNumberRequest {
	r.xApiKey = &xApiKey
	return r
}

// Registration number of the vehicle to find details for
func (r ApiGetVehicleDetailsByRegistrationNumberRequest) VehicleRequest(vehicleRequest VehicleRequest) ApiGetVehicleDetailsByRegistrationNumberRequest {
	r.vehicleRequest = &vehicleRequest
	return r
}

// Consumer Correlation ID
func (r ApiGetVehicleDetailsByRegistrationNumberRequest) XCorrelationId(xCorrelationId string) ApiGetVehicleDetailsByRegistrationNumberRequest {
	r.xCorrelationId = &xCorrelationId
	return r
}

func (r ApiGetVehicleDetailsByRegistrationNumberRequest) Execute() (*Vehicle, *http.Response, error) {
	return r.ApiService.GetVehicleDetailsByRegistrationNumberExecute(r)
}

/*
GetVehicleDetailsByRegistrationNumber Get vehicle details by registration number

Returns vehicle details based on registration number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetVehicleDetailsByRegistrationNumberRequest
*/
func (a *VehicleApiService) GetVehicleDetailsByRegistrationNumber(ctx context.Context) ApiGetVehicleDetailsByRegistrationNumberRequest {
	return ApiGetVehicleDetailsByRegistrationNumberRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Vehicle
func (a *VehicleApiService) GetVehicleDetailsByRegistrationNumberExecute(r ApiGetVehicleDetailsByRegistrationNumberRequest) (*Vehicle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Vehicle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VehicleApiService.GetVehicleDetailsByRegistrationNumber")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vehicles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xApiKey == nil {
		return localVarReturnValue, nil, reportError("xApiKey is required and must be specified")
	}
	if r.vehicleRequest == nil {
		return localVarReturnValue, nil, reportError("vehicleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-key"] = parameterToString(*r.xApiKey, "")
	if r.xCorrelationId != nil {
		localVarHeaderParams["X-Correlation-Id"] = parameterToString(*r.xCorrelationId, "")
	}
	// body params
	localVarPostBody = r.vehicleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
